function pushchannelmathcallback(pushChannelMath, ~, guiNd)
    % PUSHCHANNELMATHCALLBACK Summary of this function goes here
    %   Detailed explanation goes here
    %
    %
    
    %% Check for an open channel math window.
    guiChannelMath = getappdata(guiNd, 'guiChannelMath');
    
    if ~isempty(guiChannelMath)
        figure(guiChannelMath)
        return
    end % if
    
    %% Load the cdata.
    xtndnderizerCData = getappdata(guiNd, 'xtndnderizerCData');
    
    %% Create the channel arithmetic GUI.
    parentPos = get(guiNd, 'Position');
    
    guiWidth = 230;
    guiHeight = 233;
    guiPos = [...
        parentPos(1, 1) + (parentPos(1, 3) - guiWidth)/2, ...
        parentPos(1, 2) + (parentPos(1, 4) - guiHeight)/2, ...
        guiWidth, ...
        guiHeight];

    guiChannelMath = figure(...
        'CloseRequestFcn', {@closerequestfcn, guiNd}, ...
        'Color', 'k', ...
        'MenuBar', 'None', ...
        'Name', 'Channel arithmetic', ...
        'NumberTitle', 'Off', ...
        'Position', guiPos, ...
        'Resize', 'Off', ...
        'Tag', 'guiChannelMath');
    
    % Create the expression edit box.
    uicontrol(...
        'Background', 'k', ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Left', ...
        'Parent', guiChannelMath, ...
        'Position', [10 188 108 24], ...
        'String', 'Expression', ...
        'Style', 'text', ...
        'Tag', 'textExpression');
    
    % Check for a stored expression.
    if isappdata(guiNd, 'userExpression')
        defaultExpression = getappdata(guiNd, 'userExpression');
        
    else
        defaultExpression = 'ch1./ch2';
        
    end % if
    
    tipString = sprintf([...
            'Enter an expression:\n' ...
            '\vuse ch1 and ch2 to indicate channels\n' ...
            '\vuse .* to multiply and ./ divide']);
    editExpression = uicontrol(...
        'Background', 'k', ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'Parent', guiChannelMath, ...
        'Position', [120 190 100 24], ...
        'String', defaultExpression, ...
        'Style', 'edit', ...
        'Tag', 'editExpression', ...
        'TooltipString', tipString);
    
    % Create the channel name edit box.
    uicontrol(...
        'Background', 'k', ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Left', ...
        'Parent', guiChannelMath, ...
        'Position', [10 138 108 24], ...
        'String', 'Channel name', ...
        'Style', 'text', ...
        'Tag', 'textChannelName');
    
    % Check for a stored channel name.
    if isappdata(guiNd, 'userExpression')
       defaultName = getappdata(guiNd, 'channelMathName');
        
    else
        checkWaves = findobj(guiNd, '-regexp', 'Tag', 'checkWave\d');
        cSize = max([1, length(checkWaves)]);
        defaultName = ['Channel ' num2str(cSize + 1)];
        
    end % if
    
    % Get the maximum number of channels that could be in the resulting data set.
    editChannelName = uicontrol(...
        'Background', 'k', ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'Parent', guiChannelMath, ...
        'Position', [120 140 100 24], ...
        'String', defaultName, ...
        'Style', 'edit', ...
        'Tag', 'editChannelName', ...
        'TooltipString', 'Enter a name for the channel (optional)');
    
    % Create the channel color picker button.
    uicontrol(...
        'Background', 'k', ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Left', ...
        'Parent', guiChannelMath, ...
        'Position', [10 88 108 24], ...
        'String', 'Channel color', ...
        'Style', 'text', ...
        'Tag', 'textChannelColor');
    
    % Check for a stored color.
    if isappdata(guiNd, 'userExpression')
       defaultColor = getappdata(guiNd, 'channelMathColor');
        
    else
        defaultColor = [1 1 1];
        
    end % if
    
    pushColor = uicontrol(...
        'Background', 'k', ...
        'Callback', {@pushcolorcallback}, ...
        'CData', xtndnderizerCData.ColorWheel, ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'Parent', guiChannelMath, ...
        'Position', [120 90 24 24], ...
        'String', '', ...
        'Style', 'pushbutton', ...
        'Tag', 'pushColor', ...
        'TooltipString', 'Select a color for the channel (optional)', ...
        'UserData', defaultColor);
    
    % Create the test/accept button.
    uicontrol(...
        'Background', 'k', ...
        'Callback', {@pushreset}, ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'Parent', guiChannelMath, ...
        'Position', [10 40 90 24], ...
        'String', 'Reset', ...
        'Style', 'pushbutton', ...
        'Tag', 'pushReset', ...
        'TooltipString', 'Press to cancel channel math');
        
    % Create the test/accept button.
    tipString = sprintf([...
        'Press to test for a valid expression\n' ...
        'If expression is valid, it will be applied to the Imaris data set']);
    uicontrol(...
        'Background', 'k', ...
        'Callback', {@pushtest}, ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'Parent', guiChannelMath, ...
        'Position', [130 40 90 24], ...
        'String', 'Test', ...
        'Style', 'pushbutton', ...
        'Tag', 'pushCalc', ...
        'TooltipString', tipString);
        
    %% Setup the status bar.
    hStatus = statusbar(guiChannelMath, '');
    hStatus.CornerGrip.setVisible(false)

    hStatus.ProgressBar.setForeground(java.awt.Color.black)
    hStatus.ProgressBar.setString('')
    hStatus.ProgressBar.setStringPainted(true)
    
    %% Store the figure handle as appdata in the parent GUI.
    setappdata(guiNd, 'guiChannelMath', guiChannelMath)
    
    %% Nested function to reset the channel math.
    function pushreset(varargin)
        % PUSHRESET Deactivate channel arithmetic
        %
        %

        %% Turn off the cdata hightlight.
        set(pushChannelMath, 'CData', xtndnderizerCData.ChannelMathOff)
        
        %% Delete the channel arithmetic user data.
        if isappdata(guiNd, 'userExpression')
            rmappdata(guiNd, 'userExpression');
        end % if
        
        if isappdata(guiNd, 'channelMathName')
            rmappdata(guiNd, 'channelMathName');
        end % if
        
        if isappdata(guiNd, 'channelMathColor')
            rmappdata(guiNd, 'channelMathColor');
        end % if
    end % pushreset
    
    %% Nested function to evaluate the expression
    function pushtest(varargin)
        % PUSHTEST Validate the expression and setup channel arithmetic
        %
        %
        
        %% Setup the status bar.
        hStatus.setText('Testing expression')
        
        %% Get the expression.
        userExpression = get(editExpression, 'String');
        if isempty(userExpression)
            hStatus.setText('')
            return
        end % if

        %% Search the expression to determine the channels we need.
        chStrs = regexp(userExpression, 'ch\d{1,}', 'Match');
        chStrs = unique(chStrs);
        chIdxStrs = regexp(userExpression, 'ch(\d{1,})', 'Tokens');
        chIdxs = unique(cellfun(@str2double, chIdxStrs, 'UniformOutput', 1));

        %% Create a dummy copy of the expression to test evaluation.
        % We do this to avoid wasting time getting all the data if we can't
        % evaluate the expression.
        fieldStr = repmat({'structDummy(X).Data'}, size(chIdxs));
        idxExpression = repmat({'X'}, size(chIdxs));
        idxReplace = cellfun(@num2str, num2cell(chIdxs), 'UniformOutput', 0);
        chReferences = cellfun(@regexprep, fieldStr, idxExpression, idxReplace, ...
                'UniformOutput', 0);
        dummyExpression = regexprep(userExpression, chStrs, chReferences);

        % Try to evaluate the dummy expression with dummy data.
        structDummy(chIdxs) = struct(...
            'Str', chStrs, ...
            'Data', ones(4, 3, 2, 2));
        
        try
            testOutput = eval(dummyExpression);

            % Update the status bar message.
            hStatus.setText('Expression valid')
            
            % Set the toggle icon cdata.
            set(pushChannelMath, 'CData', xtndnderizerCData.ChannelMathOn)

            % Store the expression, channel name, and channel color.
            setappdata(guiNd, 'userExpression', userExpression);
            setappdata(guiNd, 'channelMathName', get(editChannelName, 'String'));
            setappdata(guiNd, 'channelMathColor', get(pushColor, 'UserData'));
            
        catch xtchannelarithmeticError
            hStatus.setText(sprintf(xtchannelarithmeticError.message))
            return
            
        end % try
    end % pushtest
end % pushchannelmathcallback


%%  Callback to set new channel color choice.
function pushcolorcallback(pushColor, ~)
    % PUSHCOLORCALLBACK Set the channel pseudocolor
    %
    %
    
    %% Call the MATLAB color picker GUI.
    waveColor = get(pushColor, 'UserData');
    newColor = selectcolor(waveColor, ...
        'Color', 'k', ...
        'Name', 'New channel color', ...
        'Position', guiNd);
    
    %% Update the color choice.
    set(pushColor, 'UserData', newColor)
end % pushcolorcallback


%% Close request function
function closerequestfcn(guiChannelMath, ~, guiNd)
    %
    %
    %
    
    %% Close the GUI and remove its appdata entry.
    rmappdata(guiNd, 'guiChannelMath')
    delete(guiChannelMath)
end % closerequestfcn
