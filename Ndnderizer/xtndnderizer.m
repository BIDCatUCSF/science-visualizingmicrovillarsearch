%   Description: Import data acquired using Metamorph's multi dimensional acquisition
%
%   <CustomTools>
%       <Menu>
%           <Item name="Ndnderizer" icon="Matlab" tooltip="Import data acquired using Metamorph's multi dimensional acquisition app">
%               <Command>MatlabXT::xtndnderizer(%i)</Command>
%           </Item>
%       </Menu>
%   </CustomTools>
% 
%   ©2013, P. Beemiller. Licensed under a Creative Commmons Attribution
%   license. Please see: http://creativecommons.org/licenses/by/3.0/

function xtndnderizer(varargin)
    % NDNDERIZER Import Metamorph data sets into Imaris.
    %   NDNDERIZER is an interface for importing into Imaris data acquired
    %   using Metamorph's multi-dimensional acquisition applet. If an
    %   Imaris instance ID is passed to the ndnderizer, it will import the
    %   data into the Imaris instance indicated by the ID. If an ID is not
    %   supplied, a new instance of Imaris will be created to Import the
    %   data. The data will be saved without prompting for an overwrite.
    %
    %   SYNTAX
    %   ------
    %   xtndnderizer
    %   xtndnderizer(imarisID)
    
    %% Parse the input.
    xtndnderizerParser = inputParser;
    
    addOptional(xtndnderizerParser, 'xImarisID', 0, ...
        @(arg)...
        (isnumeric(arg) && rem(arg, 1) == 0) || ...
        (~isnan(str2double(arg)) && rem(str2double(arg), 1) == 0))
    
    parse(xtndnderizerParser, varargin{:})
    
    %% Create the figure.
    desktopPos = get(0, 'MonitorPositions');
    guiWidth = 1102;
    guiHeight = 405;
    figPos = [...
        (desktopPos(1, 3) - guiWidth)/2, ...
        (desktopPos(1, 4) - guiHeight)/2, ...
        guiWidth, ...
        guiHeight];
    
    guiNd = figure(...
        'CloseRequestFcn', {@xtndnderizerclosefcn}, ...
        'Color', 'k', ...
        'MenuBar', 'None', ...
        'Name', 'Ndnderizer', ...
        'NumberTitle', 'Off', ...
        'Position', figPos, ...
        'Resize', 'Off', ...
        'Tag', 'guiNd');
    
    %% Store any input argument for the import function.
    if nargin ~= 0
        setappdata(guiNd, 'xImarisID', varargin{1})
    end % if
    
    %% Load the button cdata.
    xtndnderizerCData = load('xtndnderizer_cdata.mat');
    setappdata(guiNd, 'xtndnderizerCData', xtndnderizerCData)
    
    %% Create the file open button.
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@pushfolderopencallback, guiNd}, ...
        'CData', xtndnderizerCData.Folder, ...
        'Parent', guiNd, ...
        'Position', [25 319 36 36], ...
        'Style', 'pushbutton', ...
        'Tag', 'pushOpen', ...
        'TooltipString', 'Open a folder with Metamorph MDA data');
    
    %% Create the .nd selection GUI items.
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Left', ...
        'Parent', guiNd, ...
        'Position', [67 339 108 24], ...
        'String', 'Data sets', ...
        'Style', 'text', ...
        'Tag', 'textNd');
    
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@popupndcallback, guiNd}, ...
        'Foreground', 'w', ...
        'Parent', guiNd, ...
        'Position', [67 315 158 24], ...
        'Style', 'popupmenu', ...
        'String', ' ', ...
        'Tag', 'popupNd', ...
        'TooltipString', 'Select a multidimensional data set to import to Imaris');
    
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 10, ...
        'Foreground', 'w', ...
        'Parent', guiNd, ...
        'Position', [66 285 158 24], ...
        'Style', 'checkbox', ...
        'String', 'Import all data sets', ...
        'Tag', 'checkBatchImport', ...
        'TooltipString', 'Check to batch import all data sets using the specified settings');
    
    %% Create the stage position selection listbox.
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Left', ...
        'Parent', guiNd, ...
        'Position', [25 245 150 24], ...
        'String', 'Stage positions', ...
        'Style', 'text', ...
        'Tag', 'textStage');
    
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@listboxstagecallback, guiNd}, ...
        'Foreground', 'w', ...
        'Min', 1, ...
        'Max', 3, ...
        'Parent', guiNd, ...
        'Position', [25 95 200 150], ...
        'Style', 'listbox', ...
        'Tag', 'listboxStage', ...
        'TooltipString', 'Stage positions to import to Imaris');
    
    %% Create the channel editing section labels.
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Left', ...
        'Parent', guiNd, ...
        'Position', [250 339 150 24], ...
        'String', 'Channels', ...
        'Style', 'text', ...
        'Tag', 'textChannels');
    
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [410 339 50 24], ...
        'String', 'Color', ...
        'Style', 'text', ...
        'Tag', 'textColor');

    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [468 363 120 24], ...
        'String', 'Channel shifts', ...
        'Style', 'text', ...
        'Tag', 'textChannelShifts');    
    
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [468 339 50 24], ...
        'String', 'X', ...
        'Style', 'text', ...
        'Tag', 'textXShift');
    
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [538 339 50 24], ...
        'String', 'Y', ...
        'Style', 'text', ...
        'Tag', 'textYShift');
    
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'FontSize', 12, ...
        'Foreground', 'w', ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [606 339 100 24], ...
        'String', 'Scaling', ...
        'Style', 'text', ...
        'Tag', 'textScaling');
    
    %% Create a preview axes.
    axesPreview = axes(...
        'Box', 'On', ...
        'Color', 'None', ...
        'NextPlot', 'Add', ...
        'Parent', guiNd, ...
        'Position', [754 83 256 256]./[guiWidth guiHeight guiWidth guiHeight], ...
        'Tag', 'axesPreview', ...
        'XColor', 'w', ...
        'XTick', [], ...
        'XTickLabel', {}, ...
        'YColor', 'w', ...
        'YTick', [], ...
        'YTickLabel', {});
    
    % Plot a blank image. We update the cdata later.
    imshow(zeros([256, 256, 3], 'uint8'));
    axis image
    
    %% Create buttons to edit the movie settings.
    % Toggle zoom
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@togglezoomcallback, guiNd}, ...
        'CData', xtndnderizerCData.Zoom, ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [725 316 24 24], ...
        'String', '', ...
        'Style', 'togglebutton', ...
        'Tag', 'toggleZoom', ...
        'TooltipString', 'Zoom');
    
    % Toggle pan
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@togglepancallback, guiNd}, ...
        'CData', xtndnderizerCData.Pan, ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [726 286 24 24], ...
        'String', '', ...
        'Style', 'togglebutton', ...
        'Tag', 'togglePan', ...
        'TooltipString', 'Pan');
    
    % Toggle data cursor
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@toggledatacursorcallback, guiNd}, ...
        'CData', xtndnderizerCData.DataCursor, ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [725 256 24 24], ...
        'String', '', ...
        'Style', 'togglebutton', ...
        'Tag', 'toggleDataCursor', ...
        'TooltipString', 'Data cursor');
    
    % Toggle output cropping
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@togglecropcallback, guiNd, axesPreview}, ...
        'CData', xtndnderizerCData.CropOff, ...
        'HorizontalAlign', 'Center', ...
        'Parent', guiNd, ...
        'Position', [725 226 24 24], ...
        'String', '', ...
        'Style', 'togglebutton', ...
        'Tag', 'toggleCrop', ...
        'TooltipString', 'Crop the movie region');
    
    % Toggle single z expansion
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@togglesinglezexpandcallback, guiNd}, ...
        'CData', xtndnderizerCData.SingleZExpandOff, ...
        'Parent', guiNd, ...
        'Position', [725 196 24 24], ...
        'Style', 'togglebutton', ...
        'Tag', 'toggleSingleZExpand', ...
        'TooltipString', 'Duplicate wavelength images acquired at a single focal plane to all z planes');
    
    % Toggle time point persistence
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@toggletimepersistcallback, guiNd}, ...
        'CData', xtndnderizerCData.TimePersistOff, ...
        'Parent', guiNd, ...
        'Position', [725 166 24 24], ...
        'Style', 'togglebutton', ...
        'Tag', 'toggleTimePersist', ...
        'TooltipString', 'Display persistent images for wavelengths acquired at selected time points');

    % Toggle image overlay
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@toggleoverlaycallback, guiNd}, ...
        'CData', xtndnderizerCData.OverlayOff, ...
        'Parent', guiNd, ...
        'Position', [725 136 24 24], ...
        'Style', 'togglebutton', ...
        'Tag', 'toggleOverlay', ...
        'TooltipString', 'Output movie as a color overlay');

    % Toggle image labels
    uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@togglelabelscallback, guiNd}, ...
        'CData', xtndnderizerCData.LabelsOff, ...
        'Parent', guiNd, ...
        'Position', [725 106 24 24], ...
        'Style', 'togglebutton', ...
        'Tag', 'toggleLabels', ...
        'TooltipString', 'Add channel labels to the movie');

    %% Create a button to generate a movie output.
    % Create a button to make a movie
    uicontrol(...
        'BackgroundColor', get(guiNd, 'Color'), ...
        'Callback', {@pushmoviecallback, guiNd}, ...
        'CData', xtndnderizerCData.Record, ...
        'Parent', guiNd, ...
        'Position', [1047 316 24 24], ...
        'Style', 'pushbutton', ...
        'Tag', 'pushMovie', ...
        'TooltipString', 'Create a video from the selected data');

    %% Create buttons to generate Imaris output.
    % Create a button to create an extra channel using channel arithmetic.
    uicontrol(...
        'BackgroundColor', get(guiNd, 'Color'), ...
        'Callback', {@pushchannelmathcallback, guiNd}, ...
        'CData', xtndnderizerCData.ChannelMathOff, ...
        'Parent', guiNd, ...
        'Position', [1047 256 24 24], ...
        'Style', 'pushbutton', ...
        'Tag', 'pushChannelMath', ...
        'TooltipString', 'Perform channel arithmetic on the Imaris data');
    
    % Create a button to import the data to Imaris.
    uicontrol(...
        'BackgroundColor', get(guiNd, 'Color'), ...
        'Callback', {@pushimarisimportcallback, guiNd}, ...
        'CData', xtndnderizerCData.Export, ...
        'Parent', guiNd, ...
        'Position', [1047 226 24 24], ...
        'Style', 'pushbutton', ...
        'Tag', 'pushImport', ...
        'TooltipString', 'Export the selected data to Imaris');
    
    %% Create a time point slider and play button for the preview axes.
    sliderTime = uicomponent(...
        'Background', java.awt.Color.black, ...
        'Foreground', java.awt.Color.white, ...
        'KeyReleasedCallback', {@slidertimepointcallback, guiNd}, ...
        'Minimum', 1, ...
        'Maximum', 1, ...
        'MouseReleasedCallback', {@slidertimepointcallback, guiNd}, ...
        'Name', 'sliderTime', ...
        'PaintTicks', 1, ...
        'Parent', guiNd, ...
        'Position', [753, 38, 260, 24], ...
        'Style', 'javax.swing.jslider', ...
        'ToolTipText', num2str(1, '%u'), ...
        'Value', 1);

    % Toggle play
    togglePlay = uicontrol(...
        'Background', get(guiNd, 'Color'), ...
        'Callback', {@toggleplaycallback, guiNd}, ...
        'CData', xtndnderizerCData.Play, ...
        'Parent', guiNd, ...
        'Position', [725 42 24 24], ...
        'Style', 'togglebutton', ...
        'Tag', 'togglePlay', ...
        'TooltipString', 'Play the current nd series');

    % Create a timer function for the play button.
    playTimer = timer(...
        'BusyMode', 'drop', ...
        'ExecutionMode', 'fixedSpacing', ...
        'Name', 'playTimer', ...
        'Period', 0.042, ... % 1/24
        'Tag', 'playTimer', ...
        'TimerFcn', {@toggletimercallback, sliderTime, guiNd});
    setappdata(togglePlay, 'playTimer', playTimer)
    
    %% Create a z slice slider for the preview axes.
    uicomponent(...
        'Background', java.awt.Color.black, ...
        'Foreground', java.awt.Color.white, ...
        'KeyReleasedCallback', {@sliderzslicecallback, guiNd}, ...
        'Minimum', 1, ...
        'Maximum', 1, ...
        'MouseReleasedCallback', {@sliderzslicecallback, guiNd}, ...
        'Name', 'sliderZSlice', ...
        'Orientation', 1, ...
        'PaintTicks', 1, ...
        'Parent', guiNd, ...
        'Position', [1018, 82, 24, 260], ...
        'Style', 'javax.swing.jslider', ...
        'ToolTipText', num2str(1, '%u'), ...
        'Value', 1);

    %% Setup the status bar.
    hStatus = statusbar(guiNd, '');
    hStatus.CornerGrip.setVisible(false)
    
    hStatus.ProgressBar.setForeground(java.awt.Color.black)
    hStatus.ProgressBar.setString('')
    hStatus.ProgressBar.setStringPainted(true)
end % xtndnderizer


% GUI cslose request function
function xtndnderizerclosefcn(guiNd, ~)
    % XTNDNDERIZERCLOSEFCN Close the gui
    %
    %
    
    %% Close the region position window if open.
    guiRegionPos = getappdata(guiNd, 'guiRegionPos');
    if ~isempty(guiRegionPos)
        delete(guiRegionPos)
    end % if
    
    %% Close the channel math window if open.
    guiChannelMath = getappdata(guiNd, 'guiChannelMath');
    if ~isempty(guiChannelMath)
        delete(guiChannelMath)
    end % if
    
    %% Find the play button timer object, stop it, delete it, then close the GUI.
    playTimer = timerfind('Name', 'playTimer');
    stop(playTimer)
    delete(playTimer)
    delete(guiNd)
end % xtndnderizerclosefcn